<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Atcoder Beginner Contest 368 题解</title>
    <url>/2024-08-24-atcoder-abc-368.html</url>
    <content><![CDATA[<h1 id="A-Cut"><a href="#A-Cut" class="headerlink" title="A.Cut"></a>A.Cut</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p>输入一个数组 $ a[1],a[2],…,a[n] $ 和一个数字 $k $ ，输出 $a[k],a[k+1],…,a[n],a[1],a[2],…a[k-1]$。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol>
<li>直接 for 循环输出即可</li>
<li>使用 STL  <code>deque</code> （？）</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> <span class="comment">// deque</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k, tmp;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; deq;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; tmp;</span><br><span class="line">        deq.<span class="built_in">push_back</span>(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (k--)</span><br><span class="line">    &#123;</span><br><span class="line">        deq.<span class="built_in">push_front</span>(deq.<span class="built_in">back</span>());</span><br><span class="line">        deq.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!deq.<span class="built_in">empty</span>())</span><br><span class="line">        cout &lt;&lt; deq.<span class="built_in">front</span>() &lt;&lt; <span class="string">&quot; &quot;</span>, deq.<span class="built_in">pop_front</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> <span class="comment">// for</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - k; i &lt; n; i++)</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - k; i++)</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="B-Decrease-2-max-elements"><a href="#B-Decrease-2-max-elements" class="headerlink" title="B.Decrease 2 max elements"></a>B.Decrease 2 max elements</h1><h2 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h2><p>输入一个数组 $ a[1],a[2],…,a[n] $，重复将数组降序排序，将前两个数字分别 -1，求几次后让整个数组最多只有一个正数</p>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><h3 id="针对此题"><a href="#针对此题" class="headerlink" title="针对此题"></a>针对此题</h3><p>范围非常小，直接暴力就行。</p>
<h3 id="范围变大时候的更快解法"><a href="#范围变大时候的更快解法" class="headerlink" title="范围变大时候的更快解法"></a>范围变大时候的更快解法</h3><p>首先，每次操作 $\displaystyle\sum _ {i&#x3D;1} ^ NA _ i$ 都会减少 $2$ ，因此答案小于或等于 $\displaystyle\Biggl\lfloor\dfrac12\sum _ {i&#x3D;1} ^ NA _ i\Biggr\rfloor$ 。</p>
<p>接下来，由于每次操作中 $\displaystyle\max _ {1\leq i\leq N}A _ i$ 最多减少 $1$ ，因此 $\displaystyle\sum _ {i&#x3D;1} ^ NA _ i-\max _ {1\leq i\leq N}A _ i$ 在 $1$ 操作中减少 $1$ 或 $2$ ，结果小于或等于 $\displaystyle\sum _ {i&#x3D;1} ^ NA _ i-\max _ {1\leq i\leq N}A _ i$ 。</p>
<p>所以答案为$\displaystyle\min\Biggl\lbrace\Biggl\lfloor\dfrac12\sum _ {i&#x3D;1} ^ NA _ i\Biggr\rfloor,\sum _ {i&#x3D;1} ^ NA _ i-\max _ {1\leq i\leq N}A _ i\Biggr\rbrace$。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> <span class="comment">// brute</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">vec</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		cin &gt;&gt; vec[i];</span><br><span class="line">	<span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">sort</span>(<span class="built_in">all</span>(vec), greater&lt;&gt;());</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		vec[<span class="number">0</span>]--, vec[<span class="number">1</span>]--, cnt++;</span><br><span class="line">		<span class="built_in">sort</span>(<span class="built_in">all</span>(vec), greater&lt;&gt;());</span><br><span class="line">	&#125; <span class="keyword">while</span> (vec[<span class="number">0</span>] &gt; <span class="number">0</span> &amp;&amp; vec[<span class="number">1</span>] &gt; <span class="number">0</span>);</span><br><span class="line">	cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> <span class="comment">// math</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="type">int</span> sum = <span class="number">0</span>, mx = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (n--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> a;</span><br><span class="line">		cin &gt;&gt; a;</span><br><span class="line">		sum += a;</span><br><span class="line">		mx = <span class="built_in">max</span>(a, mx);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">min</span>(sum / <span class="number">2</span>, sum - mx) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="C-Triple-Attack"><a href="#C-Triple-Attack" class="headerlink" title="C.Triple Attack"></a>C.Triple Attack</h1><h2 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h2><p>输入一个数组 $ a[1],a[2],…,a[n] $，每次对数组第一个数重复以下操作，当第一个数降到0及以下的时候将其移出数组：</p>
<ol>
<li>将数字减少1</li>
<li>将数字减少1</li>
<li>将数字减少3</li>
</ol>
<p>问几次操作后能置空整个数组。</p>
<h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>本题有坑。移出一个数字以后其操作次数是保留的，如果在移出头部数字的时候已经进行了前两步操作，那么可以直接对下一个数进行第三步操作。（吃了两发）</p>
<p>当第一个敌人的生命值达到 $5$ 或更高时，接下来的 $3$ 操作可以使第一个敌人的生命值减少 $5$ ，无论 $T$ 的当前值是多少。如果第一个敌人的生命值是 $H$ ，这组三个动作将重复 $\lfloor\frac{H}{5}\rfloor$ 组。通过一次性处理这部分并模拟即可。</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	i64 cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> a;</span><br><span class="line">		cin &gt;&gt; a;</span><br><span class="line">		cnt += a / <span class="number">5</span> * <span class="number">3</span>;</span><br><span class="line">		a %= <span class="number">5</span>;</span><br><span class="line">		<span class="keyword">while</span> (a &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cnt++;</span><br><span class="line">			<span class="keyword">if</span> (cnt % <span class="number">3</span> == <span class="number">0</span>)</span><br><span class="line">				a -= <span class="number">3</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				a--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; cnt &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="D-Minimum-Steiner-Tree"><a href="#D-Minimum-Steiner-Tree" class="headerlink" title="D.Minimum Steiner Tree"></a>D.Minimum Steiner Tree</h1><h2 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h2><p>给一颗 $n$ 个节点， $n-1$ 条边的树，给出 $k$ 个节点，找到连接这 $k$ 个节点的最小联通块的大小。</p>
<h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>带路径染色的DFS。用 <code>vector &lt;bool&gt;</code> 存一下被染色的路径点和需要找到的 $k$ 个节点即可。</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edges[MAXN];</span><br><span class="line"><span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">vec</span><span class="params">(MAXN)</span></span>;</span><br><span class="line"><span class="type">int</span> n, k;</span><br><span class="line"><span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">vis</span><span class="params">(MAXN)</span></span>;</span><br><span class="line"><span class="type">int</span> ans = INT_MAX;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> start)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	vis[start] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> edge : edges[start])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!vis[edge] &amp;&amp; <span class="built_in">dfs</span>(edge))</span><br><span class="line">			vec[start] = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	vis[start] = <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">if</span> (vec[start])</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> u, v;</span><br><span class="line">		cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">		edges[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">		edges[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> start = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> tmp;</span><br><span class="line">		cin &gt;&gt; tmp;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">			start = tmp;</span><br><span class="line">		vec[tmp] = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">dfs</span>(start);</span><br><span class="line">	cout &lt;&lt; <span class="built_in">count</span>(<span class="built_in">all</span>(vec), <span class="literal">true</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>以下为补题部分</strong></p>
<h1 id="F-Dividing-Game"><a href="#F-Dividing-Game" class="headerlink" title="F.Dividing Game"></a>F.Dividing Game</h1><h2 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h2><p>输入一个数组 $ a[1],a[2],…,a[n] $，<code>Anna</code> 和 <code>Bruno</code> 轮流选取其中的数字 $a[i]$ ，并且将 $a[i]$ 替换为其任意一个非自己的因数。不能进行此操作的玩家输掉比赛。问谁会赢。</p>
<h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><p>Nim 游戏中的 SG 函数。<a href="https://oi.wiki/math/game-theory/impartial-game/#%E6%9C%89%E5%90%91%E5%9B%BE%E6%B8%B8%E6%88%8F%E4%B8%8E-sg-%E5%87%BD%E6%95%B0">参考资料（OI WIKI）</a>，<a href="https://www.luogu.com.cn/article/shyocttb">参考资料2（洛谷博客，SG函数精讲）</a>。</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">	<span class="type">int</span> m = INT_MIN;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		cin &gt;&gt; a[i], m = <span class="built_in">max</span>(m, a[i]);</span><br><span class="line">	vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">d</span>(m + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span> * i; j &lt;= m; j += i)</span><br><span class="line">			d[j].<span class="built_in">push_back</span>(i); <span class="comment">// 因数</span></span><br><span class="line">	<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sg</span><span class="params">(m + <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt;= m; x++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> k = d[x].<span class="built_in">size</span>();</span><br><span class="line">		<span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">cnt</span><span class="params">(k + <span class="number">1</span>)</span></span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">auto</span> y : d[x])</span><br><span class="line">			<span class="keyword">if</span> (sg[y] &lt;= k)</span><br><span class="line">				cnt[sg[y]]++;</span><br><span class="line">		<span class="keyword">while</span> (cnt[sg[x]] &gt; <span class="number">0</span>)</span><br><span class="line">			sg[x]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		ans ^= sg[a[i]];</span><br><span class="line">	cout &lt;&lt; (ans &gt; <span class="number">0</span> ? <span class="string">&quot;Anna&quot;</span> : <span class="string">&quot;Bruno&quot;</span>) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>TODO：G，F</strong></p>
]]></content>
      <categories>
        <category>Atcoder题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>ACM</tag>
        <tag>算法竞赛</tag>
      </tags>
  </entry>
</search>
